{{- if not .Values.application.initializeCommand -}}
apiVersion: {{ default "extensions/v1beta1" .Values.deploymentApiVersion }}
kind: Deployment
metadata:
  name: {{ template "trackableappname" . }}
  annotations:
    {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
    {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
  labels:
    app: {{ template "appname" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    service: {{ .Values.securityfachade.service.name }}
spec:
{{- if or .Values.enableSelector (eq (default "extensions/v1beta1" .Values.deploymentApiVersion) "apps/v1") }}
  selector:
    matchLabels:
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.application.tier }}"
      release: {{ .Release.Name }}
      service: {{ .Values.securityfachade.service.name }}
{{- end }}
  replicas: {{ .Values.replicaCount }}
{{- if .Values.strategyType }}
  strategy:
    type: {{ .Values.strategyType | quote }}
{{- end }}
  template:
    metadata:
      annotations:
        checksum/application-secrets: "{{ .Values.application.secretChecksum }}"
        {{ if .Values.gitlab.app }}app.gitlab.com/app: {{ .Values.gitlab.app | quote }}{{ end }}
        {{ if .Values.gitlab.env }}app.gitlab.com/env: {{ .Values.gitlab.env | quote }}{{ end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        app: {{ template "appname" . }}
        track: "{{ .Values.application.track }}"
        tier: "{{ .Values.application.tier }}"
        release: {{ .Release.Name }}
        service: {{ .Values.securityfachade.service.name }}
    
    spec:
    {{- if .Values.comment }}
      volumes:
      - name: configs
        configMap:
          defaultMode: 0755
          name: security-configmap
          items:
          - key: network_configuration.json
            path: config/network_configuration.json
          - key: configuration.json
            path: config/configuration.json
          - key: app_configuration.json
            path: config/app_configuration.json
          - key: ca.odins.es.jks
            path: certs/ca.odins.es.jks
          - key: cliente.iotcrawler.org.jks
            path: certs/cliente.iotcrawler.org.jks
          - key: iotcrawler.odins.es.jks
            path: certs/iotcrawler.odins.es.jks
          - key: servidor.iotcrawler.org_cert.pem
            path: certs/servidor.iotcrawler.org_cert.pem
          - key: servidor.iotcrawler.org_privkey.pem
            path: certs/servidor.iotcrawler.org_privkey.pem
          - key: trust_store.jks
            path: certs/trust_store.jks
          - key: server.xml
            path: server.xml
    {{end}}
      imagePullSecrets:
{{ toYaml .Values.securityfachade.image.secrets | indent 10 }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.securityfachade.image.repository }}:{{ .Values.securityfachade.image.tag }}"
        imagePullPolicy: {{ .Values.securityfachade.image.pullPolicy }}
	{{- if .Values.application.secretName }}
        envFrom:
        - secretRef:
            name: {{ .Values.application.secretName }}
        {{- end }}
        env:
        - name: CAPMANAGER_CONFIG_FOLDER
          value: /usr/local/tomcat/conf/configuration_files
        {{- if .Values.comment }}
        volumeMounts:
        - name: configs
          mountPath: /usr/local/tomcat/conf/configuration_files
        {{end}}
        ports:
        - name: "{{ .Values.securityfachade.service.name }}"
          containerPort: {{ .Values.securityfachade.service.internalPort }}
        livenessProbe:
{{- if eq .Values.livenessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            scheme: {{ .Values.livenessProbe.scheme }}
            port: {{ .Values.securityfachade.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.securityfachade.service.internalPort }}
{{- else if eq .Values.livenessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.livenessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
{{- if eq .Values.readinessProbe.probeType "httpGet" }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            scheme: {{ .Values.readinessProbe.scheme }}
            port: {{ .Values.securityfachade.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "tcpSocket" }}
          tcpSocket:
            port: {{ .Values.securityfachade.service.internalPort }}
{{- else if eq .Values.readinessProbe.probeType "exec" }}
          exec:
            command:
{{ toYaml .Values.readinessProbe.command | indent 14 }}
{{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
      restartPolicy: Always
      enableServiceLinks: false
status: {}
{{- end -}}
